//..............................................................................
//
//  This file is part of the LuaDoxyXML toolkit.
//
//  LuaDoxyXML is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/luadoxyxml/license.txt
//
//..............................................................................

lookahead = 2;
ParserClassName = Parser;
TokenClassName = Token;

Includes
{
	#include "Lexer.h"
	#include "Module.h"
}

CppIncludes
{
	#include "Parser.llk.h"
}

Members
{
	Module* m_module;
	ModuleItem* m_lastDeclaredItem;
	dox::Parser m_doxyParser;
	sl::String m_fileName;
	int m_scopeLevel;
}

Members2
{
	Parser(Module* module);

	void
	create(
		const sl::StringRef& fileName,
		int startSymbolKind = StartSymbol
		)
	{
		m_fileName = fileName;
		llk::Parser<Parser, Token>::create(startSymbolKind);
	}

	Table*
	createTable();

	Variable*
	declareVariableEx(
		ModuleItemKind itemKind,
		const Token::Pos& pos,
		const sl::StringRef& name
		);

	Variable*
	declareNamedField(
		const Token::Pos& pos,
		const sl::StringRef& name
		)
	{
		return declareVariableEx(ModuleItemKind_Field, pos, name);
	}

	Variable*
	declareIndexedField(
		const Token::Pos& pos,
		const Value& index
		);

	Variable*
	declareUnnamedField(
		const Token::Pos& pos,
		const Value& initializer
		);

	Variable*
	declareVariable(
		const Token::Pos& pos,
		const sl::StringRef& name
		)
	{
		return declareVariableEx(ModuleItemKind_Variable, pos, name);
	}

	Variable*
	declareFunctionParam(
		const Token::Pos& pos,
		const sl::StringRef& name
		)
	{
		return declareVariableEx(ModuleItemKind_FunctionParam, pos, name);
	}

	Function*
	declareFunction(
		const Token::Pos& pos,
		FunctionName* name
		);

	void
	finalizeDeclaration(
		const Token::Pos& pos,
		ModuleItem* item,
		const sl::StringRef& name = NULL
		);
}

start
nullable
block
	:	statement*
	;

statement
	enter
	{
		m_lastDeclaredItem = NULL;
	}
	:	expression_stmt
	|	label
	|	TokenKind_Goto TokenKind_Identifier
	|	TokenKind_Break
	|	TokenKind_Return expression_list?
	|	TokenKind_Do block TokenKind_End
	|	TokenKind_While
			{
				m_scopeLevel++;
			}
		expression TokenKind_Do block TokenKind_End
			{
				m_scopeLevel--;
			}
	|	TokenKind_Repeat
			{
				m_scopeLevel++;
			}
		block
			{
				m_scopeLevel--;
			}
		TokenKind_Until expression
	|	TokenKind_If
			{
				m_scopeLevel++;
			}
		expression TokenKind_Then block
		(TokenKind_ElseIf expression TokenKind_Then block)*
		(TokenKind_Else block)?
			{
				m_scopeLevel--;
			}
		TokenKind_End
	|	TokenKind_For
			{
				m_scopeLevel++;
			}
		for_iterator TokenKind_Do block TokenKind_End
			{
				m_scopeLevel--;
			}
	|	function_decl
	|	TokenKind_Local
			{
				m_scopeLevel++;
			}
		TokenKind_Function TokenKind_Identifier function_body
			{
				m_scopeLevel--;
			}
	|	TokenKind_Local name_list ('=' expression_list)?
	|	';'
	;

function_decl
	local
	{
		Function* $function;
	}
	:	TokenKind_Function function_name
			{
				$function = !m_scopeLevel ? declareFunction($1.m_pos, &$2.m_name) : NULL;
				m_scopeLevel++;
			}
		function_body $b
			{
				--m_scopeLevel;
				if ($function)
					sl::takeOver(&$function->m_paramArray, &$b.m_paramArray);
			}

	;

label
	:	TokenKind_Context TokenKind_Identifier TokenKind_Context
	;

class
{
	FunctionName m_name;
}
function_name
	:	TokenKind_Identifier $i1
			{
				$.m_name.m_first = $i1.m_data.m_string;
			}
		('.' TokenKind_Identifier $i2
			{
				$.m_name.m_list.insertTail($i2.m_data.m_string);
			}
		)*
		(':' TokenKind_Identifier $i3
			{
				$.m_name.m_list.insertTail($i3.m_data.m_string);
				$.m_name.m_isMethod = true;
			}
		)?
	;

class
{
	FunctionParamArray m_paramArray;
	Token::Pos m_lastTokenPos;
}
function_body
	:	'(' parameter_list<&$.m_paramArray>? ')' block TokenKind_End $e
			{
				$.m_lastTokenPos = $e.m_pos;
			}
	;

parameter_list<FunctionParamArray* $argArray>
	:	parameter<$argArray> (',' parameter<$argArray>)*
	;

parameter<FunctionParamArray* $argArray>
	:	TokenKind_Identifier
			{
				Variable* arg = declareFunctionParam($1.m_pos, $1.m_data.m_string);
				$argArray->m_array.append(arg);
			}
	|	TokenKind_Ellipsis
			{
				$argArray->m_isVarArg = true;
			}
	;

for_iterator
	: 	TokenKind_Identifier '=' expression ',' expression (',' expression)?
	| 	name_list TokenKind_In expression_list
	;

class
{
	sl::BoxList<sl::StringRef> m_nameList;
}
name_list
	:	TokenKind_Identifier
			{
				$.m_nameList.insertTail($1.m_data.m_string);
			}
		(',' TokenKind_Identifier
			{
				$.m_nameList.insertTail($3.m_data.m_string);
			}
		)*
	;

expression_stmt
	local
	{
		Variable* $variable;
	}
	enter
	{
		$variable = NULL;
	}
	:	postfix_expr
			{
				if (!m_scopeLevel && $1.m_value.m_valueKind == ValueKind_Variable)
					$variable = declareVariable($1.m_value.m_firstTokenPos, $1.m_value.m_source);
			}
		(',' postfix_expr
			{
				$variable = NULL;
			}
		)*
		('='
		expression_list $e
			{
				if ($variable)
					$variable->m_initializer = $e.m_value;
			}
		)?
	;

class
{
	Value m_value;
}
expression_list
	:	expression
			{
				$.m_value = $1.m_value;
			}
		(',' expression
			{
				$.m_value.appendSource($3.m_value.m_lastTokenPos);
			}
		)*
	;

class
{
	Value m_value;
}
expression
	:	unary_expr
			{
				$.m_value = $1.m_value;
			}
		(bin_op expression
			{
				$.m_value.appendSource($3.m_value.m_lastTokenPos);
			}
		)*
	;

class
{
	Value m_value;
}
unary_expr
	:	postfix_expr
			{
				$.m_value = $1.m_value;
			}
	|	un_op unary_expr
			{
				$.m_value.setFirstToken($1.m_pos);
				$.m_value.appendSource($2.m_value.m_lastTokenPos);
			}
	;

class
{
	Value m_value;
}
postfix_expr
	: 	primary_expr
			{
				$.m_value = $1.m_value;
			}
		(postfix_op
			{
				$.m_value.appendSource($2.m_lastTokenPos);
			}
		)*
	;

class
{
	Token::Pos m_lastTokenPos;
}
postfix_op
	:	'[' expression ']'
			{
				$.m_lastTokenPos = $3.m_pos;
			}
	|	'.' TokenKind_Identifier
			{
				$.m_lastTokenPos = $2.m_pos;
			}
	|	(':' TokenKind_Identifier)? arguments
			{
				$.m_lastTokenPos = $3.m_lastTokenPos;
			}
	;

class
{
	Value m_value;
}
primary_expr
	:	TokenKind_Nil
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Constant);
			}
	|	TokenKind_False
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Constant);
			}
	|	TokenKind_True
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Constant);
			}
	|	TokenKind_Number
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Constant);
			}
	|	TokenKind_String
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Constant);
			}
	|	TokenKind_Identifier
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Variable);
			}
	|	TokenKind_Ellipsis
			{
				$.m_value.setFirstToken($1.m_pos);
			}
	|	TokenKind_Function function_body
			{
				$.m_value.setFirstToken($1.m_pos);
				$.m_value.appendSource($2.m_lastTokenPos);
			}
	|	table_constructor
			{
				$.m_value = $1.m_value;
			}
	|	'(' expression ')'
			{
				$.m_value.setFirstToken($1.m_pos);
				$.m_value.appendSource($3.m_pos);
			}
	;

class
{
	Token::Pos m_lastTokenPos;
}
arguments
	: 	'(' expression_list? ')'
			{
				$.m_lastTokenPos = $3.m_pos;
			}
	|	table_constructor
			{
				$.m_lastTokenPos = $1.m_value.m_lastTokenPos;
			}
	|	TokenKind_String
			{
				$.m_lastTokenPos = $1.m_pos;
			}
	;

class
{
	Value m_value;
}
table_constructor
	:	'{'
			{
				$.m_value.setFirstToken($1.m_pos, ValueKind_Table);
				$.m_value.m_table = createTable();
			}
		field_list<$.m_value.m_table>?
		'}'
			{
				$.m_value.appendSource($3.m_pos, ValueKind_Table);
			}
	;

field_list<Table* $table>
	:	field
			{
				$table->m_fieldArray.append($1.m_field);
			}
		(field_sep (field
			{
				$table->m_fieldArray.append($3.m_field);
			}
		)?)*
	;

class
{
	Variable* m_field;
}
field
	enter
	{
		$.m_field = NULL;
	}
	:	'[' expression ']'
			{
				$.m_field = $2.m_value.m_valueKind == ValueKind_Variable ?
					declareNamedField($1.m_pos, $2.m_value.m_source) :
					declareIndexedField($1.m_pos, $2.m_value);
			}
		'=' expression $i
			{
				$.m_field->m_initializer = $i.m_value;
			}
	|	TokenKind_Identifier
			{
				$.m_field = declareNamedField($1.m_pos, $1.m_data.m_string);
			}
		'=' expression $i
			{
				$.m_field->m_initializer = $i.m_value;
			}
	|	expression
			{
				$.m_field = $1.m_value.m_valueKind == ValueKind_Variable ?
					declareNamedField($1.m_value.m_firstTokenPos, $1.m_value.m_source) :
					declareUnnamedField($1.m_value.m_firstTokenPos, $1.m_value);
			}
	;

field_sep
	:	','
	|	';'
	;

bin_op
	:	TokenKind_Or
	|	TokenKind_And
	|	'<'
	|	'>'
	|	TokenKind_Le
	|	TokenKind_Ge
	|	TokenKind_Ne
	|	TokenKind_Eq
	|	'|'
	|	'~'
	|	'&'
	|	TokenKind_Shl
	|	TokenKind_Shr
	|	TokenKind_Concat
	|	'+'
	|	'-'
	|	'*'
	|	'/'
	|	'%'
	|	TokenKind_FloorDiv
	|	'^'
	;

class
{
	Token::Pos m_pos;
}
un_op
	:	'~'
			{
				$.m_pos = $1.m_pos;
			}
	|	'-'
			{
				$.m_pos = $1.m_pos;
			}
	|	'#'
			{
				$.m_pos = $1.m_pos;
			}
	|	TokenKind_Not
			{
				$.m_pos = $1.m_pos;
			}
	;
